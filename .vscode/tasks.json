{
	"version": "2.0.0",
	"tasks": [
		// Default Cargo build command
		{
			"type": "cargo",
			"command": "build",
			"problemMatcher": [
				"$rustc"
			],
			"group": {
				"kind": "build",
				"isDefault": true
			},
			"label": "rust: cargo build"
		},
		// Cargo clean command
		{
			"type": "cargo",
			"command": "clean",
			"problemMatcher": [
				"$rustc"
			],
			"label": "rust: cargo clean"
		},
		// Cargo deep clean command
		{
			"type": "shell",
			"command": "rm",
			"args": [
				"-r",
				"target"
			],
			"label": "rust: deep clean",
			"problemMatcher": []
		},
		// Cargo linting command
		{
			"type": "cargo",
			"command": "clippy",
			"args": [
				"--",
				"-W",
				"clippy::all",
				"-W",
				"missing_docs"
			],
			"problemMatcher": [
				"$rustc"
			],
			"label": "rust: cargo clippy"
		},
		// Cargo formatting command
		{
			"type": "cargo",
			"command": "fmt",
			"problemMatcher": [
				"$rustc"
			],
			"label": "rust: cargo fmt"
		},
		// Generate Rust documentation
		{
			"type": "cargo",
			"command": "doc",
			"problemMatcher": [
				"$rustc"
			],
			"label": "rust: cargo doc"
		},
		// Run Cargo tests
		{
			"type": "cargo",
			"command": "test",
			"problemMatcher": [
				"$rustc"
			],
			"label": "rust: cargo test"
		},
		// Generate Rust code coverage LCOV file
		{
			"type": "cargo",
			"command": "llvm-cov",
			"args": [
				"--lcov",
				"--output-path",
				"target/llvm-cov/lcov.info"
			],
			"problemMatcher": [
				"$rustc"
			],
			"label": "rust: cargo llvm-cov --lcov"
		},
		// Generate Rust code coverage HTML report
		{
			"type": "cargo",
			"command": "llvm-cov",
			"args": [
				"--html"
			],
			"problemMatcher": [
				"$rustc"
			],
			"label": "rust: cargo llvm-cov --html"
		},
		// Validate OpenAPI specification
		{
			"type": "shell",
			"command": "yarn",
			"args": [
				"workspace",
				"@core/api-spec",
				"run",
				"validate"
			],
			"problemMatcher": [],
			"label": "yarn: validate api spec"
		},
		// Generate OpenAPI bindings
		{
			"type": "shell",
			"command": "yarn",
			"args": [
				"workspace",
				"@core/api-spec",
				"run",
				"generate"
			],
			"problemMatcher": [],
			"label": "yarn: generate api bindings"
		},
		// Run database migrations
		{
			"type": "shell",
			"command": "yarn",
			"args": [
				"workspace",
				"@core/db",
				"run",
				"migrate-update"
			],
			"label": "yarn: update database migrations",
			"problemMatcher": []
		},
		// Generate database entities
		{
			"type": "shell",
			"command": "yarn",
			"args": [
				"workspace",
				"@core/db",
				"run",
				"generate-entities"
			],
			"label": "yarn: generate database entities",
			"problemMatcher": []
		},
		// Seed database
		{
			"type": "cargo",
			"command": "run",
			"args": [
				"--bin",
				"db-seed"
			],
			"problemMatcher": [
				"$rustc"
			],
			"label": "cargo: seed database"
		},
		// Test all packages
		{
			"type": "shell",
			"command": "yarn",
			"args": [
				"workspaces",
				"foreach",
				"run",
				"test"
			],
			"label": "yarn: test all workspaces",
			"problemMatcher": []
		}
	]
}
