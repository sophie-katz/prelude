# MIT License
#
# Copyright (c) 2023 Sophie Katz
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

openapi: 3.1.0

info:
  title: Portobello API
  version: 0.1.0

paths:
  /user:
    get:
      summary: List users
      description: Returns a list of all existing users in the instance
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userResponse"
  /user/{id}:
    get:
      summary: Get user by id
      description: Gets a single user by their user id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Id of the user to get
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userResponse"
        "400":
          description: "No user with id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

components:
  schemas:
    userResponse:
      type: object
      required:
        - id
        - username
      properties:
        id:
          type: integer
          description: Unique id for the user
          nullable: false
          minimum: 1
          example: 5
        username:
          type: string
          description: Username for the user
          nullable: false
          minLength: 1
          pattern: "^[a-zA-Z0-9_.-]*[a-zA-Z0-9]+[a-zA-Z0-9_.-]*$"
          example: "admin"
        icon:
          type: string
          description: An HTML base64 image value
          nullable: false
          minLength: 1
          pattern: "^data:image/[a-z0-9]+;base64, [a-zA-Z0-9/]+$"
          example: "data:image/jpeg;base64, LzlqLzRBQ... <!-- Base64 data -->"
    # configurationOptionRequest:
    configurationOptionResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          description: Unique id for the configuration option
          nullable: false
          minimum: 1
          example: 5
        name:
          type: string
          description: Name of the configuration option
          nullable: false
          minLength: 1
          pattern: "^[a-zA-Z_.-][a-zA-Z0-9_.-]*$"
          example: "enabledSystems.ticket"
        typeId:
          type: integer
          description: Unique id for the type of the value of the configuration option
          nullable: false
          minimum: 1
          example: 5
        typeName:
          type: string
          description: Name of the type of the value of the configuration option
          nullable: false
          minLength: 1
          enum:
            - boolean
            - integer
            - string
          example: "integer"
        isList:
          type: boolean
          description: Whether or not the configuration option has a list of values (true) or just a single value (false)
          nullable: false
        value:
          oneOf:
            - type: boolean
              nullable: false
            - type: integer
              nullable: false
            - type: string
              nullable: false
            - type: array
              nullable: false
              minLength: 1
              items:
                oneOf:
                  - type: boolean
                    nullable: false
                  - type: integer
                    nullable: false
                  - type: string
                    nullable: false
          description: The value of the configuration option
          nullable: true
          examples:
            null:
              value: null
              summary: Configuration options can be null
            singleValue:
              value: 5
              summary: Configuration options can be single values of boolean, integer, or string types
            multipleValues:
              value: [1, 5, 9]
              summary: Configuration options can also be ordered lists of values
    error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          minLength: 1
          example: "no user with id"

